/*
Mason McManus
C++ Fa21
Due October 27 2021
CIS162
Lab 5 Number Guessing Game: A player has to guess a number ranging from 1 - 100 and has 20 guesses to do so
*/

#include <iostream>
#include <cmath>
#include <stdlib.h>
#include <time.h>

using namespace std;

void NGGBanner();  // Shows the player a greeting to the game
bool NumCompare();  // Shows the player if they won the game or not
void IncorrectGuess();  // Shows the player a list of sentences if they guess the number wrong (between 1 -10)
void AnotherGame();  // Shows the player a list of sentences if they want to play again (between 1 - 10)
bool NewGame();  // Depicts whether the player wants to play again or to close the program
void ScoreBoard(int totalgames, int wins, int losses); // Shows the player the amount of wins, losses, and amount of games played
void SuccessMessage();  // Shows the player a message to the screen congradulating them on winning the game


int main()
{
	bool gameloop = true;
	int totalgames = 0;
	int wins = 0;
	int losses = 0;

	do
	{
		++totalgames;  // Shows the total number of games played
		ScoreBoard(totalgames, wins, losses);  // Prints out the scoreboard

		NGGBanner();  // Prints welcome message and instructions on how to play the game

		if (NumCompare())  // If NumCompare() returns true, the player guessed the correct number and won
		{
			++wins;
			SuccessMessage();  // Prints a success message
			cout << endl;
			AnotherGame();  // Asks the player if they would like to play again
			cout << endl;
			if (NewGame())  // If the player decides to play again, NewGame() will come back as true 
			{
				gameloop = true; //Loop control set to true
				continue; //New game is started
			}
			else  // NewGame() comes back as false and the player has decided to end the game
			{
				gameloop = false;  // The loop contol is set to false
				continue;  // Loop control has ended
			}
		}
		else  // The player has lost the game by using all of their 20 guesses
		{
			++losses;  // Shows all of the losses they players has tallied up
			if (NewGame())  // If the player decides to play again, NewGame() returns true
			{
				gameloop = true;  // Loop control set to true
				continue;  // A new game has begun
			}
			else  // NewGame() returns as false and the player has decided to end the game
			{
				gameloop = false;  // Loop control set to false
				continue;  //Game loop is exited and the game has ended
			}
		}
	} while (gameloop);

	ScoreBoard(totalgames, wins, losses);  //Prints final score board.

	cout << "Ok bye now..." << endl;
}

void NGGBanner()  // Shows the player how the game will be set up and played
{
	cout << "Instructions: " << endl;
	cout << "The computer will randomly generate a number ranging from 1 - 100." << endl;
	cout << "You have to guess the correct number in order to win the game." << endl;
	cout << "So with that being said, what will your first guess be... " << endl;
	cout << "[[Enter Number Here]]:  ";
}

bool NumCompare()
{
	int numcompare;  // Stores the random number that is generated by the computer
	srand(unsigned int(time(NULL)));  // Uses the random number generator
	numcompare = rand() % 10 + 1;  // Picks between the corresponding sentences to execute

	int totalguesses = 19;  // Shows the player how many guesses they have left
	int count = 1;  // Counts down the number of tries the player has from each guess
	int guess;
		cin >> guess;

		do
		{
			if (!cin)  // Shows that the player has entered in something invaild (letters, numbers below or above the number range, etc.)
			{
				cout << "Your input was not within the guidelines of the game..." << endl;
				cout << "You should only put numbers ranging between 1 to 100 in... nothing else." << endl;
				cin.clear();  //This line clears the failure for the input put in
				cin.ignore(1000);  // Ignore anything else in the line that caused the input stream to fail

				cout << "Try again: ";
				cin >> guess;
			}
			else if (isdigit(guess) && guess <= 0 || guess > 100) // Used to show if the player entered an input outside of the guidelines, where the isdigit() method is used to check if the input is a number within the guidlines of the game
			{
				cout << "The number you entered is out of range." << endl;
				cout << "Your input should only be inbetween 1 and 100..." << endl;
				cout << "Try again: " << endl;
				cin >> guess;
			}
			else if (guess != numcompare)  // The player guesses the incorrect number
			{
				++count;
				IncorrectGuess();  // Shows that guessing the wrong number will output a sentence from the "IncorrectGuess()" section

				if (totalguesses > 1)
					cout << "You have " << totalguesses << " guesses left" << endl;
				else
					cout << "Uh oh... you only have " << totalguesses << " guess left..." << endl;
				totalguesses--;

				cout << "Try again: ";
				cin >> guess;
			}
			else  // The player guesses a random number
			{
				return true;  // NumCompare returns a true value to the main function
			}
		} while (count < 20);

		cout << "You are out of guesses! Ha Ha Ha";
		cout << "And guess what... the secret number was: " << numcompare;
		AnotherGame();  // Prints a random message asking the player if they want to play again from the "AnotherGame" section
		return false;  // Returns false to the main function

		return 0;
}

void IncorrectGuess()
{
	int incorrectguess = 0;  // Used to randomly pick a success message
	srand(unsigned int(time(NULL)));  // Uses the random number generator
	incorrectguess = rand() % 10 + 1;  // Picks between the corresponding sentences to execute
	switch (incorrectguess)
	{
		case 1:
			cout << "Sorry but that is not correct..." << endl;
			break;
		case 2:
			cout << "HAHA you got it wrong!!" << endl;
			break;
		case 3:
			cout << "Incorrect... Try Again." << endl;
			break;
		case 4:
			cout << "Incorrect..." << endl;
			break;
		case 5:
			cout << "Sorry... but you're kinda wrong." << endl;
			break;
		case 6:
			cout << "Falsely Executed." << endl;
			break;
		case 7:
			cout << "Sucker! You got it wrong!" << endl;
			break;
		case 8:
			cout << "LOL you really suck at this game don't ya..." << endl;
			break;
		case 9:
			cout << "You got it incorrect." << endl;
			break;
		case 10:
			cout << "Eso es falso" << endl;
			break;
	}
}

void AnotherGame()
{
	int anothergame = 0;  // Used to randomly pick a success message
	srand(unsigned int(time(NULL)));  // Uses the random number generator
	anothergame = rand() % 10 + 1;  // Picks between the corresponding sentences to execute
	switch (anothergame)
	{
		case 1:
			cout << "Thank you for playing." << endl;
			break;
		case 2:
			cout << "Would you like to play again?" << endl;
			break;
		case 3:
			cout << "If you would like, you could play again" << endl;
			break;
		case 4:
			cout << "Do you want to play again?" << endl;
			break;
		case 5:
			cout << "Play again... I dare you..." << endl;
			break;
		case 6:
			cout << "Ha Ha I bet you won't play again..." << endl;
			break;
		case 7:
			cout << "Man, you suck... play again though." << endl;
			break;
		case 8:
			cout << "You should really play again." << endl;
			break;
		case 9:
			cout << "Win or lose, I hope you had fun." << endl;
			break;
		case 10:
			cout << "If you want to play again, you are totally worthy to." << endl;
			break;

	}
}

bool NewGame()
{
	char option;  // Used to store the players answer to the menu
	bool switchloop = true;  // Used for a do-while loop
	bool newgame = true;  // Used to store the answer and depicts whether they chose to play again or end the game

	do
	{
		cout << "Choose whether you would like to continue or leave the game." << endl;
		cout << "Continue - '1'" << endl;
		cout << "Leave - '2'" << endl;

		cin >> option;

		switch (option)
		{
			case '1':
				newgame = true;  // Returns the value to the "newgame" function
				switchloop = false;  // Will break out to the "return" function
				break;
				
			case '2':
				newgame = false;  // Returns the value to the "newgame" function
				switchloop = false;  // Will break out to the "return" function
				break;

			default:	cout << "You can only pick the numbers that correspond with the statement above..." << endl;
				break;
		}
	} while (switchloop);

	return newgame;
}

void ScoreBoard(int totalgames, int wins, int losses)
{
	cout << "Total games played:" << totalgames << endl;
	cout << endl;
	cout << "Games won:" << wins << endl;
	cout << endl;
	cout << "Games lost:" << losses << endl;
	cout << endl;
}

void SuccessMessage()
{
	int successmessage = 0;  // Used to randomly pick a success message
	srand(unsigned int(time(NULL)));  // Uses the random number generator
	successmessage = rand() % 10 + 1;  // Picks between the corresponding sentences to execute
	switch (successmessage)
	{
		case 1:
			cout << "Congratulations! You actually got it right!" << endl;
			break;
		case 2:
			cout << "Wow I can't believe that you're smart enough to get that correct" << endl;
			break;
		case 3:
			cout << "Well that's surprising..." << endl;
			break;
		case 4:
			cout << "Ok you were definitely cheating..." << endl;
			break;
		case 5:
			cout << "I... Cannot... Believe it..." << endl;
			break;
		case 6:
			cout << "Good Job! You guessed the correct answer!" << endl;
			break;
		case 7:
			cout << "Ok you got it... now get out of here..." << endl;
			break;
		case 8:
			cout << "Good job I guess." << endl;
			break;
		case 9:
			cout << "Great Guess!!" << endl;
			break;
		case 10:
			cout << "Congradulations... on cheating..." << endl;
			break;
	}
}